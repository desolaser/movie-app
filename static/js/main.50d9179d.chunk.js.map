{"version":3,"sources":["protectedRoute.js","components/app/app.js","components/app/index.js","serviceWorker.js","reducers/auth.js","reducers/index.js","config/store.js","index.js"],"names":["ProtectedRoute","Component","component","rest","auth","useSelector","state","render","props","to","pathname","from","location","Login","lazy","MovieScreen","MovieDetails","App","className","fallback","path","exact","Boolean","window","hostname","match","authReducer","action","type","rootReducer","combineReducers","persistentState","serializedState","localStorage","getItem","JSON","parse","error","console","log","loadFromLocalStorage","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","subscribe","stringify","setItem","saveToLocalStorage","getState","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"+PAwBeA,EApBQ,SAAC,GAAqC,IAAzBC,EAAwB,EAAnCC,UAAyBC,EAAU,6BAClDC,EAAOC,aAAY,SAACC,GAAD,OAAWA,EAAMF,QAC1C,OACI,kBAAC,IAAD,iBAAWD,EAAX,CAAiBI,OACb,SAACC,GACG,OAAOJ,EACP,kBAACH,EAAcO,GACf,kBAAC,IAAD,CAAUC,GACN,CACIC,SAAU,IACVJ,MAAO,CACHK,KAAMH,EAAMI,kBCXlCC,EAAQC,gBAAK,kBAAM,gCACnBC,EAAcD,gBAAK,kBAAM,gCACzBE,EAAeF,gBAAK,kBAAM,gCAmBjBG,ICxBAA,EDQf,WACE,OACE,yBAAKC,UAAU,aACb,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUC,SAAU,4CAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACnB,UAAWW,IACjC,kBAAC,EAAD,CAAgBO,KAAK,UAAUC,OAAK,EAACnB,UAAWa,IAChD,kBAAC,EAAD,CAAgBK,KAAK,cAAclB,UAAWc,SELtCM,QACW,cAA7BC,OAAOX,SAASY,UAEe,UAA7BD,OAAOX,SAASY,UAEhBD,OAAOX,SAASY,SAASC,MACvB,2D,WCVSC,EARK,WAA4B,IAA3BpB,EAA0B,wDAAXqB,EAAW,uCAC3C,OAAOA,EAAOC,MACV,IAAK,QAAU,OAAO,EACtB,IAAK,SAAW,OAAO,EACvB,QAAS,OAAOtB,ICGTuB,EAJKC,YAAgB,CAChC1B,KAAMsB,ICmBJK,EAXuB,WACzB,IACI,IAAMC,EAAkBC,aAAaC,QAAQ,SAC7C,GAAwB,OAApBF,EAA0B,OAC9B,OAAOG,KAAKC,MAAMJ,GACpB,MAAOK,GAEL,YADAC,QAAQC,IAAIF,IAKIG,GAElBC,EAAQC,YACVb,EACAE,EACAR,OAAOoB,8BAAgCpB,OAAOoB,gCAGlDF,EAAMG,WAAU,kBA5BW,SAAAtC,GACvB,IACI,IAAM0B,EAAkBG,KAAKU,UAAUvC,GACvC2B,aAAaa,QAAQ,QAASd,GAChC,MAAOK,GACLC,QAAQC,IAAIF,IAuBEU,CAAmBN,EAAMO,eAEhCP,QCvBfQ,IAAS1C,OACP,kBAAC,IAAM2C,WAAP,KACE,kBAAC,IAAD,CAAUT,MAAOA,GACf,kBAAC,EAAD,QAGJU,SAASC,eAAe,SJmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAtB,GACLC,QAAQD,MAAMA,EAAMuB,c","file":"static/js/main.50d9179d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useSelector } from 'react-redux'\r\nimport { Route, Redirect } from 'react-router-dom'\r\n\r\nconst ProtectedRoute = ({component: Component, ...rest}) => {    \r\n    const auth = useSelector((state) => state.auth)\r\n    return (\r\n        <Route {...rest} render={ \r\n            (props) => {\r\n                return auth ?\r\n                <Component {...props}/> :\r\n                <Redirect to={\r\n                    {\r\n                        pathname: '/',\r\n                        state: {\r\n                            from: props.location\r\n                        }\r\n                    }\r\n                } />\r\n            }\r\n        } />\r\n    )\r\n}\r\n\r\nexport default ProtectedRoute","import React, { Suspense, lazy } from 'react'\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\r\nimport ProtectedRoute from '../../protectedRoute'\r\n\r\nconst Login = lazy(() => import('./login'))\r\nconst MovieScreen = lazy(() => import('./movieScreen'))\r\nconst MovieDetails = lazy(() => import('./movieDetails'))\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"container\">\r\n      <Router>\r\n        <Suspense fallback={<div>Loading...</div>}>\r\n          <Switch>\r\n            <Route path=\"/\" exact component={Login} />\r\n            <ProtectedRoute path=\"/movies\" exact component={MovieScreen} />\r\n            <ProtectedRoute path=\"/movies/:id\" component={MovieDetails} />\r\n          </Switch>         \r\n        </Suspense>     \r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import App from './app'\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const authReducer = (state = false, action) => {\r\n    switch(action.type) {\r\n        case 'LOGIN' : return true;\r\n        case 'LOGOUT' : return false;\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default authReducer;","import authReducer from './auth'\r\nimport { combineReducers } from 'redux'\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: authReducer\r\n})\r\n\r\nexport default rootReducer","import { createStore } from 'redux';\r\nimport rootReducer from '../reducers';\r\n\r\nconst saveToLocalStorage = state => {\r\n    try {\r\n        const serializedState = JSON.stringify(state)\r\n        localStorage.setItem('state', serializedState)\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nconst loadFromLocalStorage = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('state')\r\n        if (serializedState === null) return undefined\r\n        return JSON.parse(serializedState)\r\n    } catch (error) {\r\n        console.log(error)\r\n        return undefined\r\n    }\r\n}\r\n\r\nconst persistentState = loadFromLocalStorage()\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    persistentState,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n)\r\n\r\nstore.subscribe(() => saveToLocalStorage(store.getState()))\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n// import 'font-awesome/css/font-awesome.min.css';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport store from './config/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}